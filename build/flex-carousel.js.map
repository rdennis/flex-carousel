{"version":3,"sources":["../src/flex-carousel.js"],"names":[],"mappings":"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","file":"flex-carousel.js","sourcesContent":["(function (w, d) {\n    /**\n     * Enum for carousel direction.\n     * @readonly\n     * @enum {string}\n     */\n    const DIRECTION = {\n        /** The forward direction: `forward`. */\n        FORWARD: 'forward',\n        /** The reverse direction: `reverse`. */\n        REVERSE: 'reverse'\n    };\n\n    /**\n     * @typedef {Object} FlexCarouselConfig\n     * @prop {number} initialIndex - The initial item index (default: `0`).\n     * @prop {boolean} autoPlay - Whether to start playing the carousel after initialization (default: `true`).\n     * @prop {DIRECTION} direction - The direction the carousel slides (default: `DIRECTION.FORWARD`).\n     * @prop {number} speed - The speed (in ms) of the carousel (default: `5000`).\n     */\n\n    /**\n     * @typedef {Object} FlexCarouselIndicatorConfig\n     * @prop {string} activeClass - The class to be applied to indicators when their item is active (default: '').\n     */\n\n    // list of attribute prefixes to be used for data\n    const _attributePrefixes = ['flex-carousel', 'fc'];\n\n    // regex to convert attribute names to dataset names\n    const _datasetReplacer = /-(\\w)?/g;\n\n    // map of carousel group names to lists of carousels\n    const _registry = new Map();\n\n    // seed used for creating \"unique\" carousel ids\n    let _idSeed = 0;\n\n    // backing variable for default objects\n    let _defaults = {\n        FlexCarousel: {\n            initialIndex: 0,\n            autoPlay: true,\n            direction: DIRECTION.FORWARD,\n            speed: 5000\n        },\n        FlexCarouselIndicator: {\n            activeClass: ''\n        }\n    };\n\n    // joins strs with seperator, filtering out empty strings from strs\n    function _join(seperator, ...strs) {\n        return strs.filter((s) => !!s).join(seperator);\n    }\n\n    // converts a value to a number, or the value itself, if it is not convertable\n    function _tryParseNumber(value) {\n        // convert to number if value is a number, or string containing a valid numberic representation\n        // filter out null, '', and  '    '\n        // note: isNaN(<null || ''>) return false, so we catch them with !value first\n        // note: isNaN('   ') returns false, so we catch it with !trim(value)\n        return (!value || !String.prototype.trim.call(value) || isNaN(value)) ? value : +value;\n    }\n\n    // convert an attribute name to a dataset name\n    function _attributeToDatasetName(attribute) {\n        return attribute.replace(_datasetReplacer, (match, letter) => letter.toUpperCase());\n    }\n\n    // gets a Set from the registry for a given key\n    function _getRegistrySet(name) {\n        return _registry.get(name) || new Set();\n    }\n\n    // adds a value to the Set for a given key in the registry\n    function _addRegistryValue(name, carousel) {\n        if (!_registry.has(name)) {\n            _registry.set(name, new Set());\n        }\n\n        _getRegistrySet(name).add(carousel);\n    }\n\n    // gets the full prefixed attribute name of a given attribute\n    function _getPrefixedAttributeName(el, attribute) {\n        let attributeFullName = attribute,\n            datasetName;\n\n        for (let i = 0, l = _attributePrefixes.length; i < l; i++) {\n            let prefix = _attributePrefixes[i];\n\n            attributeFullName = _join('-', prefix, attribute);\n            datasetName = _attributeToDatasetName(attributeFullName);\n\n            if (el.dataset.hasOwnProperty(datasetName) || el.hasAttribute(attributeFullName)) {\n                return attributeFullName;\n            }\n        }\n\n        return attribute;\n    }\n\n    // returns a string that is the id of an element; sets the id if none exists\n    function _getElementId(el) {\n        let id = el.getAttribute('id');\n\n        if (!id) {\n            id = `flex-carousel-${++_idSeed}`;\n            el.setAttribute('id', id);\n        }\n\n        return id;\n    }\n\n    // returns the string for a given attribute, preferring dataset over attribute name\n    function _getElementData(el, attribute) {\n        let attributeFullName = _getPrefixedAttributeName(el, attribute);\n        let datasetName = _attributeToDatasetName(attributeFullName);\n        return (el && (el.dataset[datasetName] || el.getAttribute(attributeFullName))) || '';\n    }\n\n    // returns the object that represents the key: value pairs from the item dataset/attribute\n    function _getItemElementData(el) {\n        let attributeFullName = _getPrefixedAttributeName(el, 'item');\n        let data = _getElementData(el, attributeFullName) || '';\n        let pairs = data.split(';');\n\n        return pairs.reduce((obj, pair) => {\n            let [k, v] = pair.split(':');\n\n            k = k.trim();\n\n            v = _tryParseNumber(v);\n\n            obj[k] = v;\n\n            return obj;\n        }, {});\n    }\n\n    // sets the aria-hidden attribute value based on the active item\n    function _setAriaVisibility(items, currentIndex) {\n        if (items && items.length > 0) {\n            for (let i = 0, l = items.length; i < l; i++) {\n                let item = items.item(i);\n                item.setAttribute('aria-hidden', i === currentIndex);\n            }\n        }\n    }\n\n    // sets the aria-controls attribute of a FlexCarouselControl\n    function _setAriaControls(control, targets) {\n        let ariaControls;\n\n        // make sure we have a target, element, and no element[aria-controls] value\n        if (control && targets && targets.size && control.el && !(ariaControls = control.el.getAttribute('aria-controls'))) {\n            ariaControls = '';\n\n            targets.forEach((target) => {\n                if (target && target.el) {\n                    let id = target.el.getAttribute('id');\n                    ariaControls += ` ${id}`;\n                }\n            });\n\n            control.el.setAttribute('aria-controls', ariaControls.trim());\n        }\n    }\n\n    // returns a number that is the next carousel in the rotation based on the given direction\n    function _getNextIndex(carousel, direction) {\n        let index = 0;\n\n        if (typeof direction === 'string') {\n            if (direction === '+1' || direction === DIRECTION.FORWARD) {\n                index = carousel.currentIndex + 1;\n            } else if (direction === '-1' || direction === DIRECTION.REVERSE) {\n                index = carousel.currentIndex - 1;\n            } else {\n                index = parseInt(direction, 10) || 0;\n            }\n        } else if (typeof direction === 'number') {\n            index = direction;\n        }\n\n        // if < 0, wrap to end, if > itemCount -1, wrap to beginning\n        index = index < 0 ? carousel.itemCount - 1 : index;\n        index = index > carousel.itemCount - 1 ? 0 : index;\n        return index;\n    }\n\n    // sets the active state of an indicator based on the currentIndex\n    function _setIndicatorActive(indicator, currentIndex) {\n        let active = currentIndex === indicator.index;\n\n        if (active) {\n            indicator.el.setAttribute('data-flex-carousel-indicator-active', '');\n        } else {\n            indicator.el.removeAttribute('data-flex-carousel-indicator-active');\n        }\n\n        if (indicator.activeClass) {\n            indicator.el.classList.toggle(indicator.activeClass, active);\n        }\n    }\n\n\n    /**\n     * Class responsible for carousel functionality.\n     */\n    class FlexCarousel {\n        /**\n         * Creates a FlexCarousel.\n         * @param {Element} el - The Element to use as a carousel.\n         * @param {?FlexCarouselConfig} config - Configuration for the carousel.\n         */\n        constructor(el, config) {\n            if (!el) {\n                throw 'FlexCarousel needs an Element!';\n            }\n\n            this.settings = Object.assign({}, FlexCarousel.defaults, config);\n\n            this.el = el;\n            this.id = _getElementId(this.el);\n            [this.name] = _getElementData(el).split(':');\n            this.currentIndex = this.settings.initialIndex;\n\n            this.items = this.el.children;\n            this.itemCount = this.items.length;\n\n            // todo: support vertical orientation?\n            let parentStyle = window.getComputedStyle(this.el.parentElement);\n            let elStyle = window.getComputedStyle(this.el);\n\n            // require overflow-x: hidden\n            if (parentStyle.overflowX !== 'hidden') {\n                this.el.parentElement.style.overflowX = 'hidden';\n            }\n\n            // require el to be positioned (don't care how)\n            if (elStyle.position === 'static') {\n                el.style.position = 'relative';\n            }\n\n            // require el to be a flexbox\n            if (!elStyle.display.includes('flex')) {\n                el.style.display = 'flex';\n            }\n\n            // el width is based on number of items\n            this.el.style.width = `${this.items.length * 100}%`;\n\n            // each item must have flex: 1 0 auto\n            for (let i = 0, l = this.itemCount; i < l; i++) {\n                let item = this.items.item(i);\n                item.style.flex = '1 0 auto';\n            }\n\n            _addRegistryValue(this.name, this);\n\n            // listen for events\n            ['slide', 'play', 'pause', 'toggle'].forEach((event) => {\n                this.el.addEventListener(`fc:${event}`, (e) => this[event](e.detail));\n            });\n\n            // slide to the initial item\n            this.slide(this.currentIndex);\n\n            // start the carousel\n            if (this.settings.autoPlay) {\n                this.play();\n            }\n        }\n\n        /**\n         * Moves the carousel to the given position.\n         * @param {(string|number)} direction - The zero based index of the target item, or the strings `'forward'` (or `'+1'`), or `'backward'` (or `'-1'`).\n         */\n        slide(direction) {\n            this.currentIndex = _getNextIndex(this, direction);\n            // left % is relative to the containing block\n            let position = this.currentIndex * 100;\n            this.el.style.left = `-${position}%`;\n            _setAriaVisibility(this.items, this.currentIndex);\n\n            // trigger slid event\n            this.el.dispatchEvent(new CustomEvent('fc:slid', { detail: this.currentIndex }));\n\n            // if we're waiting for a timeout, clear it and start over\n            if (this._timeout) {\n                w.clearTimeout(this._timeout);\n                // let the transition happen, then start playing again\n                w.setTimeout(() => this.play(), 0);\n            }\n        }\n\n        /**\n         * Starts automatically moving the carousel.\n         */\n        play() {\n            w.clearTimeout(this._timeout);\n            this._timeout = null;\n\n            let currentItem = this.items.item(this.currentIndex);\n            let settings = Object.assign({}, this.settings, _getItemElementData(currentItem));\n\n            this._timeout = w.setTimeout(() => {\n                this.slide(this.settings.direction);\n                this.play();\n            }, settings.speed);\n        }\n\n        /**\n         * Stops automatically moving the carousel.\n         */\n        pause() {\n            w.clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        /**\n         * Toggles the play state of the carousel.\n         */\n        toggle() {\n            if (this._timeout) {\n                this.pause();\n            } else {\n                this.play();\n            }\n        }\n\n        /**\n         * Gets the global default settings for carousels.\n         * @static\n         */\n        static get defaults() {\n            return _defaults.FlexCarousel;\n        }\n\n        /**\n         * Sets the global default settings for carousels.\n         * @static\n         * @param {FlexCarouselConfig} defaults - The default global options.\n         */\n        static set defaults(defaults) {\n            _defaults.FlexCarousel = defaults;\n        }\n    }\n\n\n    /**\n     * Class responsible for carousel control functionality.\n     */\n    class FlexCarouselControl {\n        /**\n         * Creates a FlexCarouselControl.\n         * @param {Element} el - The Element to use as a carousel control. \n         */\n        constructor(el) {\n            if (!el) throw 'FlexCarouselControl needs an Element!';\n            this.el = el;\n\n            // get data from format \"<targetName>:<event>:<param>\"\n            [this.targetName, this.event, this.param] = _getElementData(el, 'control').split(':');\n\n            _setAriaControls(this, _getRegistrySet(this.targetName));\n            this.el.addEventListener('click', () => this.onclick());\n        }\n\n        /**\n         * The handler called when the control is clicked.\n         */\n        onclick() {\n            let targets = _getRegistrySet(this.targetName);\n\n            targets.forEach((target) => {\n                if (target && target.el) {\n                    target.el.dispatchEvent(new CustomEvent(`fc:${this.event}`, { detail: this.param }));\n                }\n            });\n        }\n    }\n\n    /**\n     * Class responsible for carousel indicator functionality.\n     */\n    class FlexCarouselIndicator {\n        /**\n         * Creates a FlexCarouselIndicator.\n         * @param {Element} el - The Element to use as a carousel indicator.\n         * @param {?FlexCarouselIndicatorConfig} config - Configuration for the carousel indicator.\n         */\n        constructor(el, config) {\n            if (!el) throw 'FlexCarouselIndicator needs an Element!';\n            this.el = el;\n\n            this.settings = Object.assign({}, FlexCarouselIndicator.defaults, config);\n\n            [this.targetName, this.index, this.activeClass] = _getElementData(el, 'indicator').split(':');\n            this.index = parseInt(this.index);\n            this.activeClass = this.activeClass || this.settings.activeClass;\n\n            let targets = _getRegistrySet(this.targetName);\n\n            targets.forEach((target) => {\n                if (target && target.el) {\n                    target.el.addEventListener('fc:slid', (e) => this.onslid(e));\n                    _setIndicatorActive(this, target.currentIndex);\n                }\n            });\n        }\n\n        /**\n         * The handler called when the carousel dispatches the `fc:slid` event.\n         * @param {CustomEvent} e - The CustomEvent representing `fc:slid`.\n         * @param {number} e.detail - The index of the current item.\n         */\n        onslid(e) {\n            _setIndicatorActive(this, parseInt(e.detail));\n        }\n\n        /**\n         * Gets the global default settings for carousel indicators.\n         * @static\n         */\n        static get defaults() {\n            return _defaults.FlexCarouselIndicator;\n        }\n\n        /**\n         * Sets the global default settings for carousel indicators.\n         * @static\n         * @param {FlexCarouselIndicatorConfig} defaults - The default global options.\n         */\n        static set defaults(defaults) {\n            _defaults.FlexCarouselIndicator = defaults;\n        }\n    }\n\n    // expose classes on window\n    w.FlexCarousel = FlexCarousel;\n    w.FlexCarouselControl = FlexCarouselControl;\n    w.FlexCarouselIndicator = FlexCarouselIndicator;\n\n    // attach default initialization handler\n    d.addEventListener('fc:init', function oninit(e) {\n        // remove this listener\n        e.target.removeEventListener(e.type, oninit);\n\n        let typeMap = { '': FlexCarousel, 'control': FlexCarouselControl, 'indicator': FlexCarouselIndicator };\n        Object.keys(typeMap).forEach((type) => {\n            let ctor = typeMap[type];\n\n            let selector = _attributePrefixes.reduce((selector, prefix) => {\n                // form prefix-type if type if not empty\n                let attribute = _join('-', prefix, type);\n                return _join(',', selector, `[data-${attribute}]`, `[${attribute}]`);\n            }, '');\n\n            // instantiate component\n            d.querySelectorAll(selector).forEach((el) => new ctor(el));\n        });\n    });\n\n    // dispatch initialization event\n    d.dispatchEvent(new CustomEvent('fc:init'));\n})(window, document);"]}